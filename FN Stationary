#### Long-Memory Stationary model

kapp <- function(n, d,sigma){
  out = matrix(0,nc=n,nr=n)
  for (i in 1:n){
    j = 1:i
    a0 = gamma(1-2*d)
    a1 = lgamma(i-j+d)
    a2 = lgamma(i-j+1-d)
    a3 = gamma(1-d)*gamma(d)
    out[i,j] = sigma^2*(a0 * exp(a1-a2)/a3)
  }
  out = out + t(out)
  diag(out) = diag(out)/2
  
  return(out)
}

ls.lm.sim=function(n = n, d, sigma, z = rnorm(n)){
  a=kapp(n, d, sigma)
  b=chol(a)
  y=t(b)%*%z
  return(as.vector(y))
}

############################
#Estimador de Kalman 
############################
lslm.kalman <-function(series1,n=n, m = m, start = list(d.0 = d.0, sigma.0=sigma.0)){
  start = c(start$d.0, start$sigma.0)
  aux<-optim(par=start,fn=lslm.kalman.loglik, series=series1, n=n, m=m, method="BFGS")
  par <-aux$par
  suppressWarnings(return(par))
}


psi=function (d, m) 
{
  c(1, gamma(d + 1:m)/(gamma(d) * gamma(1:m + 1)))
}

psi

###################
#lsfn.kalman.loglik
###################
lslm.kalman.loglik <-function(x, series, m = m, nsample=n){ 	 
  M <-m+1
  d.0 <-x[1] 
  sigma.0 <-x[2] 
  
  if((d.0<=0) || d.0 >=0.5 || sigma.0<= 0 ) {
    loglik = 100000000000.
  }
  else{
    d <-d.0 
    sigma <-sigma.0 
    Omega <-matrix(0, nrow = M, ncol = M) 	 
    diag(Omega) <-sigma^2	 
    hat.y <-vector("double", nsample) ## vector de Ajuste's 	 
    W<-vector("double",nsample) ## vector de Ajuste's 	 
    F<-matrix(0,nrow=M, ncol=M)
    Q<-matrix(0,nrow=M, ncol=M) 
    F[2:M ,1:m]<-diag(m)
    Q[1,1]<-1
    psi=rep(0,M)
    delta <-vector("numeric") ## Vector de Delta's 	 
    X <-rep(0, M) 	

     for(i in 1:nsample){ 	  
      g <-sigma*rev(psi(d, m))
      aux <-Omega %*% g 	 
      delta[i] <-g %*% aux 	 
      Theta <-c(aux[2:M],0) 	 
      aux <-matrix(0, nrow = M, ncol = M) 	 
      aux[1:m,1:m] <-Omega[2:M,2:M] 	 
      aux[M,M] <-1 	 
        Omega <-aux - Theta %*% t(Theta)/delta[i] 	 
        hat.y[i]<-t(g)%*%X 	 
        aux <-c(X[2:M],0) 	 
        X <-aux + Theta * (series[i]-hat.y[i]) / delta[i] 	 
      	             }
    loglik <-sum(log(delta)) + sum(na.exclude((series-hat.y)^2/delta)) 	
    }
return(loglik)   	 
}

#################################

fit.fnkalman<-function(param, series, m = m) 
{
  M <-m+1
  d <-param[1] 
  sigma <-param[2]
  nsample<-length(series)
  Omega <-matrix(0, nrow = M, ncol = M) 	 
  diag(Omega) <-sigma^2	 
  hat.y <-vector("double", nsample) ## vector de Ajuste's 	 
  W<-vector("double",nsample) ## vector de Ajuste's 	 
  F<-matrix(0,nrow=M, ncol=M)
  Q<-matrix(0,nrow=M, ncol=M) 
  F[2:M ,1:m]<-diag(m)
  Q[1,1]<-1
  psi=rep(0,M)
  delta <-vector("numeric") ## Vector de Delta's 	 
  X <-rep(0, M) 	
  
  for(i in 1:nsample){ 	  
    g <-sigma*rev(psi(d, m))
    aux <-Omega %*% g 	 
    delta[i] <-g %*% aux 	 
    Theta <-c(aux[2:M],0) 	 
    aux <-matrix(0, nrow = M, ncol = M) 	 
    aux[1:m,1:m] <-Omega[2:M,2:M] 	 
    aux[M,M] <-1 	 
    Omega <-aux - Theta %*% t(Theta)/delta[i] 	 
    hat.y[i]<-t(g)%*%X 	 
    aux <-c(X[2:M],0) 	 
    X <-aux + Theta * (series[i]-hat.y[i]) / delta[i] 	 
  }
  return(hat.y)
}
